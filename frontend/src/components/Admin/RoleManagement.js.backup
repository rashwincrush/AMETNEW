import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import PermissionGate from '../Common/PermissionGate';
import toast from 'react-hot-toast';
import { 
  UsersIcon,
  MagnifyingGlassIcon,
  FunnelIcon,
  ShieldCheckIcon,
  UserGroupIcon,
  CheckCircleIcon,
  XMarkIcon,
  ExclamationCircleIcon
} from '@heroicons/react/24/outline';
import { supabase } from '../../utils/supabase';

// Define default roles to use if none are found in the database
const DEFAULT_ROLES = [
  { name: 'super_admin', description: 'Super Administrator' },
  { name: 'admin', description: 'Administrator' },
  { name: 'moderator', description: 'Content Moderator' },
  { name: 'employer', description: 'Employer' },
  { name: 'alumni', description: 'AMET Alumni' },
  { name: 'student', description: 'Current Student' },
  { name: 'user', description: 'Standard User' }
];

/**
 * RoleManagement - Component for super admins to assign and manage roles
 */
const RoleManagement = () => {
  const { hasPermission, getUserRole } = useAuth();
  const [users, setUsers] = useState([]);
  const [roles, setRoles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState({
    role: 'all',
    status: 'all'
  });
  const [selectedUser, setSelectedUser] = useState(null);
  const [isRoleModalOpen, setIsRoleModalOpen] = useState(false);
  
  // Fetch users and roles on component mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        
        // Fetch users with their roles
        const { data: userData, error: userError } = await supabase
          .from('profiles')
          .select('*')
          .order('updated_at', { ascending: false });
          
        if (userError) throw userError;
        
        // Fetch available roles
        const { data: roleData, error: roleError } = await supabase
          .from('roles')
          .select('*')
          .order('name', { ascending: true });
          
        if (roleError) {
          console.error('Error fetching roles:', roleError);
          setRoles(DEFAULT_ROLES);
        } else {
          console.log('Fetched roles:', roleData);
          
          // If no roles found, use the default roles
          if (!roleData || roleData.length === 0) {
            console.log('No roles found, using DEFAULT_ROLES');
            setRoles(DEFAULT_ROLES);
          } else {
            setRoles(roleData);
          }
        }
        
        setUsers(userData);
      } catch (error) {
        console.error('Error fetching data:', error);
        setError(error.message);
        // Ensure roles are set even if there's an error
        setRoles(DEFAULT_ROLES);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);
  
  // Filter and search users
  const filteredUsers = users.filter(user => {
    // Search by name or email
    if (searchQuery && 
        !(user.first_name + ' ' + user.last_name).toLowerCase().includes(searchQuery.toLowerCase()) && 
        !user.email?.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }
    
    // Filter by role
    if (filters.role !== 'all' && user.role !== filters.role) {
      return false;
    }
    
    // Filter by status (if we implement status filtering)
    // Currently using is_verified as a status proxy
    if (filters.status !== 'all') {
      if (filters.status === 'verified' && !user.is_verified) return false;
      if (filters.status === 'unverified' && user.is_verified) return false;
    }
    
    return true;
  });
  
  // Helper function to get a pretty display for role
  const getRoleBadge = (roleName) => {
    switch(roleName) {
      case 'super_admin':
        return 'bg-red-100 text-red-800';
      case 'admin':
        return 'bg-purple-100 text-purple-800';
      case 'moderator':
        return 'bg-orange-100 text-orange-800';
      case 'employer':
        return 'bg-blue-100 text-blue-800';
      case 'alumni':
        return 'bg-green-100 text-green-800';
      case 'student':
        return 'bg-teal-100 text-teal-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  
  // Helper function to get status badge styling
  const getStatusBadge = (status) => {
    if (status === true) {
      return 'bg-green-100 text-green-800';
    } else {
      return 'bg-yellow-100 text-yellow-800';
    }
  };
  
  // Open role edit modal for a user
  const handleEditRole = (user) => {
    console.log('Edit role for user:', user);
    // Set the selected user and open the modal
    setSelectedUser(user);
    setIsRoleModalOpen(true);
  };
  
  // Handle role update
  const handleRoleUpdate = async (e) => {
    e.preventDefault();
    
    try {
      const newRole = e.target.role.value;
      console.log('Updating role to:', newRole, 'for user:', selectedUser);
      
      // Update user's role in the database
      const { error } = await supabase
        .from('profiles')
        .update({ 
          role: newRole,
          updated_at: new Date().toISOString()
        })
        .eq('id', selectedUser.id);
        
      if (error) {
        console.error('Supabase error updating role:', error);
        throw error;
      }
      
      console.log('Role updated successfully in database');
      
      // Update local state
      setUsers(prevUsers => {
        const updatedUsers = prevUsers.map(user => 
          user.id === selectedUser.id ? { ...user, role: newRole } : user
        );
        console.log('Updated local users state');
        return updatedUsers;
      });
      
      // Close modal and show success message
      setIsRoleModalOpen(false);
      toast.success(`Role updated for ${selectedUser.first_name || selectedUser.email}`);
    } catch (error) {
      console.error('Error updating role:', error);
      toast.error('Failed to update role: ' + error.message);
    }
  };
  
  if (loading) return (
    <div className="flex justify-center items-center h-64">
      <div className="loading-spinner"></div>
    </div>
  );
  
  if (error) return (
    <div className="bg-red-50 p-4 rounded-lg border border-red-200 text-red-700">
      <h3 className="font-bold flex items-center">
        <ExclamationCircleIcon className="w-5 h-5 mr-2" />
        Error Loading Data
      </h3>
      <p>{error}</p>
    </div>
  );
  
  // Create a function to render the main content
  const renderContent = () => {
    return (
      <div className="space-y-6">
        {/* Header */}
        <div className="glass-card rounded-lg p-6 bg-gradient-to-r from-purple-600 to-indigo-700 text-white">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold flex items-center">
                <ShieldCheckIcon className="w-6 h-6 mr-2" />
                Role Management
              </h1>
              <p className="mt-1 opacity-90">
                Assign and manage user roles in the system
              </p>
            </div>
            <div className="hidden md:block">
              <div className="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                <UserGroupIcon className="w-8 h-8 text-white" />
              </div>
            </div>
          </div>
        </div>
        
        {/* Main Content */}
        <div className="glass-card rounded-lg p-6">
          {/* Search and Filters */}
          <div className="mb-6 flex flex-col md:flex-row gap-4">
            <div className="flex-1 relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <MagnifyingGlassIcon className="w-5 h-5 text-gray-400" />
              </div>
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search users by name or email..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            <div className="flex gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-500 mb-1">Role Filter</label>
                <div className="relative">
                  <select
                    value={filters.role}
                    onChange={(e) => setFilters(prev => ({ ...prev, role: e.target.value }))}
                    className="appearance-none w-full px-3 py-2 pr-8 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="all">All Roles</option>
                    {roles.map(role => (
                      <option key={role.name} value={role.name}>{role.name}</option>
                    ))}
                  </select>
                  <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                    <FunnelIcon className="w-4 h-4 text-gray-400" />
                  </div>
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-500 mb-1">Status</label>
                <div className="relative">
                  <select
                    value={filters.status}
                    onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
                    className="appearance-none w-full px-3 py-2 pr-8 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="all">All Statuses</option>
                    <option value="verified">Verified</option>
                    <option value="unverified">Unverified</option>
                  </select>
                  <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                    <FunnelIcon className="w-4 h-4 text-gray-400" />
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Users Table */}
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    User
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Role
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Last Updated
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredUsers.length === 0 ? (
                  <tr>
                    <td colSpan="5" className="px-6 py-10 text-center text-gray-500">
                      {searchQuery || filters.role !== 'all' || filters.status !== 'all' ? 
                        "No users match the current filters" : 
                        "No users found in the system"}
                    </td>
                  </tr>
                ) : (
                  filteredUsers.map(user => (
                    <tr key={user.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="h-10 w-10 flex-shrink-0">
                            {user.avatar_url ? (
                              <img
                                src={user.avatar_url}
                                alt={`${user.first_name || 'User'}'s avatar`}
                                className="h-10 w-10 rounded-full"
                              />
                            ) : (
                              <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                                <span className="text-gray-500 font-medium text-sm">
                                  {(user.first_name?.charAt(0) || user.email?.charAt(0) || '?').toUpperCase()}
                                </span>
                              </div>
                            )}
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">
                              {user.first_name && user.last_name 
                                ? `${user.first_name} ${user.last_name}`
                                : 'Unnamed User'
                              }
                            </div>
                            <div className="text-sm text-gray-500">{user.email}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getRoleBadge(user.role || 'user')}`}>
                          {user.role || 'user'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusBadge(user.is_verified)}`}>
                          {user.is_verified ? 'Verified' : 'Unverified'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(user.updated_at).toLocaleString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          onClick={() => handleEditRole(user)}
                          className="text-indigo-600 hover:text-indigo-900 px-2 py-1 rounded hover:bg-indigo-50"
                        >
                          Change Role
                        </button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
        
        {/* Role Assignment Modal */}
        {isRoleModalOpen && selectedUser && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 max-w-md w-full">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-bold">Update User Role</h3>
                <button 
                  onClick={() => setIsRoleModalOpen(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="w-5 h-5" />
                </button>
              </div>
              
              <div className="mb-4">
                <p className="text-sm text-gray-600">
                  Updating role for: <span className="font-medium">{selectedUser.email}</span>
                </p>
                {selectedUser.first_name && selectedUser.last_name && (
                  <p className="text-sm text-gray-500">
                    {selectedUser.first_name} {selectedUser.last_name}
                  </p>
                )}
              </div>
              
              <form onSubmit={handleRoleUpdate}>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Role
                  </label>
                  <select
                    name="role"
                    defaultValue={selectedUser.role || 'user'}
                    className="appearance-none w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {roles.map(role => (
                      <option key={role.name} value={role.name}>
                        {role.name} - {role.description}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div className="flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setIsRoleModalOpen(false)}
                    className="px-4 py-2 border border-gray-300 rounded-lg text-sm hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-indigo-600 text-white rounded-lg text-sm hover:bg-indigo-700"
                  >
                    Update Role
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Special handling for super_admin role
  const userRole = getUserRole();
  const isSuperAdmin = userRole === 'super_admin';
  
  // Either bypass permission check for super admins or wrap in PermissionGate
  const content = renderContent();
  
  if (isSuperAdmin) {
    return content;
  }
  
  return (
    <PermissionGate 
      permissions="manage_roles"
      fallback={
        <div className="bg-yellow-50 p-8 rounded-lg text-center">
          <ShieldCheckIcon className="w-12 h-12 text-yellow-500 mx-auto mb-4" />
          <h3 className="text-lg font-bold text-yellow-800">Permission Required</h3>
          <p className="text-yellow-700">You need super admin permissions to access role management.</p>
        </div>
      }
    >
      {content}
    </PermissionGate>
        
        {/* Main Content */}
        <div className="glass-card rounded-lg p-6">
          {/* Search and Filters */}
          <div className="mb-6 flex flex-col md:flex-row gap-4">
            <div className="flex-1 relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <MagnifyingGlassIcon className="w-5 h-5 text-gray-400" />
              </div>
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search users by name or email..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            <div className="flex gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-500 mb-1">Role Filter</label>
                <div className="relative">
                  <select
                    value={filters.role}
                    onChange={(e) => setFilters(prev => ({ ...prev, role: e.target.value }))}
                    className="appearance-none w-full px-3 py-2 pr-8 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="all">All Roles</option>
                    {roles.map(role => (
                      <option key={role.name} value={role.name}>{role.name}</option>
                    ))}
                  </select>
                  <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                    <FunnelIcon className="w-4 h-4 text-gray-400" />
                  </div>
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-500 mb-1">Status</label>
                <div className="relative">
                  <select
                    value={filters.status}
                    onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
                    className="appearance-none w-full px-3 py-2 pr-8 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="all">All Statuses</option>
                    <option value="verified">Verified</option>
                    <option value="unverified">Unverified</option>
                  </select>
                  <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                    <FunnelIcon className="w-4 h-4 text-gray-400" />
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Users Table */}
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    User
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Role
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Last Updated
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredUsers.length === 0 ? (
                  <tr>
                    <td colSpan="5" className="px-6 py-10 text-center text-gray-500">
                      {searchQuery || filters.role !== 'all' || filters.status !== 'all' ? 
                        "No users match the current filters" : 
                        "No users found in the system"}
                    </td>
                  </tr>
                ) : (
                  filteredUsers.map(user => (
                    <tr key={user.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="h-10 w-10 flex-shrink-0">
                            {user.avatar_url ? (
                              <img
                                src={user.avatar_url}
                                alt={`${user.first_name || 'User'}'s avatar`}
                                className="h-10 w-10 rounded-full"
                              />
                            ) : (
                              <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                                <span className="text-gray-500 font-medium text-sm">
                                  {(user.first_name?.charAt(0) || user.email?.charAt(0) || '?').toUpperCase()}
                                </span>
                              </div>
                            )}
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">
                              {user.first_name && user.last_name 
                                ? `${user.first_name} ${user.last_name}`
                                : 'Unnamed User'
                              }
                            </div>
                            <div className="text-sm text-gray-500">{user.email}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getRoleBadge(user.role || 'user')}`}>
                          {user.role || 'user'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusBadge(user.is_verified)}`}>
                          {user.is_verified ? 'Verified' : 'Unverified'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(user.updated_at).toLocaleString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          onClick={() => handleEditRole(user)}
                          className="text-indigo-600 hover:text-indigo-900 px-2 py-1 rounded hover:bg-indigo-50"
                        >
                          Change Role
                        </button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
        
        {/* Role Assignment Modal */}
        {isRoleModalOpen && selectedUser && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 max-w-md w-full">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-bold">Update User Role</h3>
                <button 
                  onClick={() => setIsRoleModalOpen(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="w-5 h-5" />
                </button>
              </div>
              
              <div className="mb-4">
                <p className="text-sm text-gray-600">
                  Updating role for: <span className="font-medium">{selectedUser.email}</span>
                </p>
                {selectedUser.first_name && selectedUser.last_name && (
                  <p className="text-sm text-gray-500">
                    {selectedUser.first_name} {selectedUser.last_name}
                  </p>
                )}
              </div>
              
              <form onSubmit={handleRoleUpdate}>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Role
                  </label>
                  <select
                    name="role"
                    defaultValue={selectedUser.role || 'user'}
                    className="appearance-none w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {roles.map(role => (
                      <option key={role.name} value={role.name}>
                        {role.name} - {role.description}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div className="flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setIsRoleModalOpen(false)}
                    className="px-4 py-2 border border-gray-300 rounded-lg text-sm hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-indigo-600 text-white rounded-lg text-sm hover:bg-indigo-700"
                  >
                    Update Role
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </PermissionGate>
  );
};

export default RoleManagement;
