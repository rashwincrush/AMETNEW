-- Schema for the mentorship messaging system

-- 1. Create the mentorship_messages table
CREATE TABLE public.mentorship_messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    request_id BIGINT NOT NULL REFERENCES public.mentorship_requests(id) ON DELETE CASCADE,
    sender_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    receiver_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    message_content TEXT NOT NULL CHECK (char_length(message_content) > 0),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    is_read BOOLEAN NOT NULL DEFAULT false
);

-- 2. Add comments to the table and columns
COMMENT ON TABLE public.mentorship_messages IS 'Stores messages exchanged between mentors and mentees within an accepted mentorship connection.';
COMMENT ON COLUMN public.mentorship_messages.request_id IS 'Links the message to the specific mentorship request.';
COMMENT ON COLUMN public.mentorship_messages.sender_id IS 'The user who sent the message.';
COMMENT ON COLUMN public.mentorship_messages.receiver_id IS 'The user who is the recipient of the message.';
COMMENT ON COLUMN public.mentorship_messages.message_content IS 'The content of the message.';
COMMENT ON COLUMN public.mentorship_messages.is_read IS 'Indicates if the message has been read by the receiver.';

-- 3. Enable Row Level Security (RLS)
ALTER TABLE public.mentorship_messages ENABLE ROW LEVEL SECURITY;

-- 4. Create RLS policies

-- Policy: Allow users to see messages they have sent or received
CREATE POLICY "Allow read access to involved users" ON public.mentorship_messages
FOR SELECT USING (
    auth.uid() = sender_id OR auth.uid() = receiver_id
);

-- Policy: Allow users to send messages only if they are part of an accepted mentorship request
CREATE POLICY "Allow insert access to involved users in an accepted request" ON public.mentorship_messages
FOR INSERT WITH CHECK (
    auth.uid() = sender_id AND
    EXISTS (
        SELECT 1
        FROM public.mentorship_requests r
        WHERE r.id = request_id
        AND r.status = 'accepted'
        AND (
            (r.mentor_id = sender_id AND r.mentee_id = receiver_id) OR
            (r.mentor_id = receiver_id AND r.mentee_id = sender_id)
        )
    )
);

-- Policy: Allow users to mark messages sent to them as read
CREATE POLICY "Allow user to update is_read status on received messages" ON public.mentorship_messages
FOR UPDATE USING (
    auth.uid() = receiver_id
) WITH CHECK (
    auth.uid() = receiver_id
);

-- 5. Create indexes for performance
CREATE INDEX idx_mentorship_messages_request_id ON public.mentorship_messages(request_id);
CREATE INDEX idx_mentorship_messages_sender_id ON public.mentorship_messages(sender_id);
CREATE INDEX idx_mentorship_messages_receiver_id ON public.mentorship_messages(receiver_id);

-- 6. Enable Realtime on the table
-- This part must be done in the Supabase UI under Database > Replication,
-- but the publication needs to be altered to include the new table.
ALTER PUBLICATION supabase_realtime ADD TABLE public.mentorship_messages;
